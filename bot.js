const { Telegraf, Markup } = require("telegraf");
const axios = require("axios");
const fs = require("fs");
const path = require("path");
const api = require('./api/api.js');
const pool = require('./api/db.js');
require("dotenv").config();

const bot = new Telegraf(process.env.token);

// ========== –ö–æ–º–∞–Ω–¥–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω) ==========
const ADMIN_ID = parseInt(process.env.ADMIN_ID, 10);
const DEVELOPER_ID = parseInt(process.env.DEVELOPER_ID, 10);

bot.start(async (ctx) => {
  await pool.saveUser(ctx);
  await ctx.reply(
    "üëã –ü—Ä–∏–≤–µ—Ç, @" +
      ctx.from.username +
      "! \n" +
      "–Ø –ø–æ–º–æ–≥–∞—é —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ –±–µ–∑ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ –∏ –≤ —Ö–æ—Ä–æ—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ –∏–∑ TikTok, Instagram, YouTube Shorts –∏ Pinterest. \n \n" +
      "<i>–ü—Ä–∏—Å—ã–ª–∞–π —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–æ–ª–∏–∫ –∏ —á–µ—Ä–µ–∑ –º–≥–Ω–æ–≤–µ–Ω–∏–µ –ø–æ–ª—É—á–∏—à—å –≤–∏–¥–µ–æ –±–µ–∑ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞.</i> \n \n" +
      "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –ø–∏—à–∏ —Å—é–¥–∞ ‚Äî @AliBabagg. \n" +
      "<b>–ò—Å–ø—Ä–∞–≤–∏–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ! üîß</b> \n",
    {
      parse_mode: "HTML",
      ...Markup.inlineKeyboard([
        [Markup.button.callback('üìò –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', 'how_to_use')]
      ])
    },
  );

  await ctx.reply(
    '–í—ã –º–æ–∂–µ—Ç–µ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é:',
    Markup.keyboard([
      ['üìò –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è']
    ])
    .resize() // —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –ø–æ–¥—Å—Ç—Ä–æ–∏–ª–∞—Å—å –ø–æ–¥ —ç–∫—Ä–∞–Ω
    .oneTime(false) // —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø–∞–¥–∞–ª–∞ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
  );
});

bot.hears('üìò –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è',  async (ctx) => {
  await pool.saveUser(ctx);
  const instruction = `üìò <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:</b>

1Ô∏è‚É£ –ù–∞–π–¥–∏ –≤–∏–¥–µ–æ –≤ TikTok, Instagram, YouTube Shorts –∏–ª–∏ Pinterest.  
2Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ.  
3Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É —Å—é–¥–∞, –≤ —á–∞—Ç —Å–æ –º–Ω–æ–π.  
4Ô∏è‚É£ –ß–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –ø–æ–ª—É—á–∏—à—å —Ñ–∞–π–ª –±–µ–∑ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞! üéâ  

‚ùó–ï—Å–ª–∏ –≤–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∏–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è ‚Äî –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.`;

  await ctx.reply(instruction, { parse_mode: 'HTML',  });
});

bot.action('how_to_use', async (ctx) => {
  await pool.saveUser(ctx);
  await ctx.answerCbQuery();

  const instruction = `üìò <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:</b>

1Ô∏è‚É£ –ù–∞–π–¥–∏ –≤–∏–¥–µ–æ –≤ TikTok, Instagram, YouTube Shorts –∏–ª–∏ Pinterest.  
2Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ.  
3Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É —Å—é–¥–∞, –≤ —á–∞—Ç —Å–æ –º–Ω–æ–π.  
4Ô∏è‚É£ –ß–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –ø–æ–ª—É—á–∏—à—å —Ñ–∞–π–ª –±–µ–∑ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞! üéâ  

‚ùó–ï—Å–ª–∏ –≤–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∏–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è ‚Äî –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.`;

  await ctx.reply(instruction, { parse_mode: 'HTML',  });
});

// –•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –∂–¥—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
let waitingForBroadcast = false;

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
bot.command('broadcast', async (ctx) => {
  if (ctx.from.id !== ADMIN_ID) return;
  waitingForBroadcast = true;
  await ctx.reply('üì£ –û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —Ä–∞–∑–æ—Å–ª–∞—Ç—å (–º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏).');
});


bot.on("text", async (ctx) => {
  await pool.saveUser(ctx);
  console.log(ctx.from.id);
  const url = ctx.message.text;
  await ctx.reply("‚è≥ –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ...");
  const interval = setInterval(async () => {
    await ctx.reply("–û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∏–¥–µ–æ...");
  }, 60000);

  let videoUrl, filePath;
  try {
    if (url.includes("youtube.com") || url.includes("youtu.be")) {
      videoUrl = await api.downloadYoutube(url);
      console.log(videoUrl);
    } else if (url.includes("tiktok")) {
      videoUrl = await api.downloadTikTok(url);
      console.log(videoUrl);
    } else if (url.includes("instagram")) {
      videoUrl = await api.downloadInstagram(url);
      console.log(videoUrl);
    } else if (url.includes("pinterest") || url.includes("pin.it")) {
      videoUrl = await api.downloadPinterest(url);
      console.log(videoUrl);
    } else {
      return ctx.reply(
        "‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ YouTube, TikTok, Instagram –∏ Pinterest.",
      );
    }

    if (videoUrl) {
      filePath = path.resolve(
        __dirname,
        `video/video_${Date.now()}_${ctx.from.id}.mp4`,
      );
      const writer = fs.createWriteStream(filePath);
      const response = await axios({
        url: videoUrl,
        method: "GET",
        responseType: "stream",
      });
      response.data.pipe(writer);

      writer.on("finish", async () => {
        try {
          await ctx.replyWithDocument(
            { source: filePath },
            {
              caption: `–í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é @${ctx.botInfo.username || "my_bot"} üòç`,
            },
          );
        } catch (err) {
          await ctx.reply(
            "–≠—Ç–æ –≤–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–∫–∞—á–∞–π—Ç–µ –≤–∏–¥–µ–æ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ " +
              videoUrl,
          );
        }
        clearInterval(interval);
        if (filePath) {
          fs.unlink(filePath, () => {});
        }
      });
      writer.on("error", (err) => new Error(err));
    } else {
      return await ctx.reply("‚ùå –í–∏–¥–µ–æ –ø–æ –¥–∞–Ω–Ω–æ–π —Å—Å—ã–ª–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
    }
  } catch (err) {
    console.log(err);
    await ctx.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ.");
    if (filePath) {
      fs.unlink(filePath, () => {});
    }
  } finally {
    clearInterval(interval);
  }
});

// –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª—é–±–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∂–¥—ë—Ç –ª–∏ –∞–¥–º–∏–Ω —Ä–∞—Å—Å—ã–ª–∫—É
bot.on('message', async (ctx) => {
  if ((ctx.from.id == ADMIN_ID || ctx.from.id == DEVELOPER_ID) && waitingForBroadcast) {
    waitingForBroadcast = false;

    broadcastInBackground(ctx);
  }
});

async function broadcastInBackground(ctx) {
  try {
    const [chats] = await pool.getAllChats();
    let sent = 0, removed = 0, failed = 0;

    // –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º event loop
    setImmediate(async () => {
      for (const chat of chats) {
        try {
          await ctx.telegram.copyMessage(
            chat.chat_id,
            ctx.chat.id,
            ctx.message.message_id
          );
          sent++;
        } catch (err) {
          if (err.response?.error_code === 403) {
            removed++;
            await pool.deleteChat(chat.chat_id);
          } else {
            failed++;
          }
        }

        // –Ω–µ–º–Ω–æ–≥–æ —Å–ø–∏–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å flood limit
        await new Promise(r => setTimeout(r, 100));
      }

      await ctx.telegram.sendMessage(
        ctx.chat.id,
        `‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n\nüì® –£—Å–ø–µ—à–Ω–æ: ${sent}\nüö´ –£–¥–∞–ª–µ–Ω–æ: ${removed}\n‚ö†Ô∏è –û—à–∏–±–æ–∫: ${failed}`
      );
    });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ:", err);
    await ctx.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏.");
  }
}

bot.launch().catch(() => waitingForBroadcast = false);
