const { Telegraf } = require('telegraf');
const axios = require('axios');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

const bot = new Telegraf(process.env.token);

// ===== API-—à–∫–∏ –¥–ª—è —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ =====
async function downloadTikTok(url) {
  try {
    const result = await fetch(`https://tiktok-downloader-download-tiktok-videos-without-watermark.p.rapidapi.com/rich_response/index?url=${encodeURIComponent(url)}`, {
      method: 'GET',
      headers: {
        'x-rapidapi-key': '3db90c491dmshbcd9b9306cd665ap15ce25jsneeded7be80ee',
        'x-rapidapi-host': 'tiktok-downloader-download-tiktok-videos-without-watermark.p.rapidapi.com',
      },
      signal: AbortSignal.timeout(60000),
    });
    console.log(url, result.status);
    if (result.status == 200) {
      const data = (await result.json());
      return data.video[0]; // mp4
    } else return new Error('api –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ')
  } catch(err) {
    console.log(err);
    return new Error('api –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ');
  }
}

async function downloadInstagram(url) {
  try {
    const result = await fetch(`https://instagram-downloader-download-instagram-stories-videos4.p.rapidapi.com/convert?url=${encodeURIComponent(url)}`, {
      method: 'GET',
      headers: {
        'x-rapidapi-key': '3db90c491dmshbcd9b9306cd665ap15ce25jsneeded7be80ee',
        'x-rapidapi-host': 'instagram-downloader-download-instagram-stories-videos4.p.rapidapi.com',
      },
      signal: AbortSignal.timeout(60000),
    });
    console.log(url, result.status);
    if (result.status == 200) {
      const data = (await result.json());
      return data.media[0].url; // mp4
    } else return new Error('api –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ')
  } catch(err) {
    console.log(err);
    return new Error('api –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ')
  }
}

async function downloadPinterest(url) {
  try {
    const result = await fetch(`https://pinterest-video-and-image-downloader.p.rapidapi.com/pinterest?url=${encodeURIComponent(url)}`, {
      method: 'GET',
      headers: {
        'x-rapidapi-key': '3db90c491dmshbcd9b9306cd665ap15ce25jsneeded7be80ee',
        'x-rapidapi-host': 'pinterest-video-and-image-downloader.p.rapidapi.com',
      },
      signal: AbortSignal.timeout(60000),
    });
    console.log(url, result.status);
    if (result.status == 200) {
      const data = (await result.json());
      return data.data.url; // mp4
    } else return new Error('api –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ')
  } catch(err) {
    console.log(err);
    return new Error('api –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ')
  }
}

async function downloadYoutube (url) {
  const path = url.split('/');
  let result;
  try {
    if (path[path.length - 2] == 'shorts') {
      result = await fetch(`https://youtube-video-fast-downloader-24-7.p.rapidapi.com/download_short/${path[path.length - 1].split("?")[0]}?quality=247`, {
        method: 'GET',
        headers: {
          'x-rapidapi-key': '3db90c491dmshbcd9b9306cd665ap15ce25jsneeded7be80ee',
          'x-rapidapi-host': 'youtube-video-fast-downloader-24-7.p.rapidapi.com',
        },
        signal: AbortSignal.timeout(60000),
      });
    } else {
      const id = path[path.length - 1].split('=')[1];
      result = await fetch(`https://youtube-video-fast-downloader-24-7.p.rapidapi.com/download_video/${id}?quality=247`, {
        method: 'GET',
        headers: {
          'x-rapidapi-key': '3db90c491dmshbcd9b9306cd665ap15ce25jsneeded7be80ee',
          'x-rapidapi-host': 'youtube-video-fast-downloader-24-7.p.rapidapi.com',
        },
        signal: AbortSignal.timeout(60000),
      });
    }
  
    console.log(url, result.status);
    if (result.status == 200) {
      const data = (await result.json());
      return data.file; // mp4
    } else return new Error('api –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ');
  } catch(err) {
    console.log(err);
    return new Error('api –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ');
  }

}

bot.start((ctx) => ctx.reply(
  '–ü—Ä–∏–≤–µ—Ç, @' + ctx.from.username + '! \n' +
'–Ø –ø–æ–º–æ–≥–∞—é —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ –±–µ–∑ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ –∏ –≤ —Ö–æ—Ä–æ—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ –∏–∑ TikTok, Instagram, YouTube Shorts –∏ Pinterest. \n \n' +

'<i>–ü—Ä–∏—Å—ã–ª–∞–π —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–æ–ª–∏–∫ –∏ —á–µ—Ä–µ–∑ –º–≥–Ω–æ–≤–µ–Ω–∏–µ –ø–æ–ª—É—á–∏—à—å –≤–∏–¥–µ–æ –±–µ–∑ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞.</i> \n \n'+

'–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –ø–∏—à–∏ —Å—é–¥–∞ ‚Äî @AliBabagg. \n'+
'<b>–ò—Å–ø—Ä–∞–≤–∏–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ!</b> \n', {
  parse_mode: 'HTML'
}
  ));

bot.on('text', async (ctx) => {
  const url = ctx.message.text;
  await ctx.reply('‚è≥ –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ...');
  const interval = setInterval(async () => {
    await ctx.reply('–û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∏–¥–µ–æ...')
  }, 60000)

  let videoUrl, filePath;
  try {
    if (url.includes('youtube.com') || url.includes('youtu.be')) {
      videoUrl = await downloadYoutube(url);
      console.log(videoUrl);
    } else if (url.includes('tiktok')) {
      videoUrl = await downloadTikTok(url);
      console.log(videoUrl);
    } else if (url.includes('instagram')) {
      videoUrl = await downloadInstagram(url);
      console.log(videoUrl);
    } else if (url.includes('pinterest') || url.includes('pin.it')) {
      videoUrl = await downloadPinterest(url);
      console.log(videoUrl);
    } else {
      return ctx.reply('‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ YouTube, TikTok, Instagram –∏ Pinterest.');
    }

    if (videoUrl) {
      filePath = path.resolve(__dirname, `video/video_${Date.now()}_${ctx.from.id}.mp4`);
      const writer = fs.createWriteStream(filePath);
      const response = await axios({ url: videoUrl, method: 'GET', responseType: 'stream' });
      response.data.pipe(writer);

      writer.on('finish', async () => {
        try {
          await ctx.replyWithDocument({ source: filePath }, { caption: `–í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é @${ctx.botInfo.username || 'my_bot'} üòç` });
        } catch (err) {
          await ctx.reply('–≠—Ç–æ –≤–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–∫–∞—á–∞–π—Ç–µ –≤–∏–¥–µ–æ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ ' + videoUrl);
        }
        clearInterval(interval);
        if (filePath) {
          fs.unlink(filePath, () => {});
        }
      })
      writer.on('error', (err) => new Error(err))
    } else {
      return await ctx.reply('‚ùå –í–∏–¥–µ–æ –ø–æ –¥–∞–Ω–Ω–æ–π —Å—Å—ã–ª–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
    }
  } catch (err) {
    console.log(err);
    await ctx.reply('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ.');
    if (filePath) {
      fs.unlink(filePath, () => {});
    }
  } finally {
    clearInterval(interval);
  }
});

bot.launch();
